@using System.Data
@using DbComparer
@model DBTest.DatabaseComparer

<link rel="stylesheet" href="~/css/PartialViewCss/ColumnMapping.css"/>
<div class="row">
    <div class="col-md-6">
        <h1>@Model.FirstDatabase.SelectedTable</h1>
        @{
            <table class="table table-bordered table-responsive table-striped table-hover">
                @foreach (Database.Column item in Model.FirstDatabase.TableColumns)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.Type</td>
                        <td class="arrow_box">@item.Length</td>
                    </tr>
                }
            </table>
        }
    </div>
    <div class="col-md-6">
        <h1>@Model.SecondDatabase.SelectedTable</h1>
        <ol class="ol-drag vertical">
            @foreach (Database.Column item in Model.SecondDatabase.TableColumns)
            {
                <li class="" style="">
                    <table class="table table-bordered drag">
                        <tbody>
                            <tr>
                                <div class="col-md-2">
                                    <td>@item.Name</td>
                                </div> <div class="col-md-2">
                                    <td>@item.Type</td>
                                </div> <div class="col-md-2">
                                    <td>@item.Length</td>
                                </div>
                            </tr>
                        </tbody>
                    </table>
                </li>
            }
        </ol>
    </div>
    <h6><button type="button" class="btn-lg" id="NextStep">NEXT STEP</button></h6>
</div>


<script src="~/js/Sortable.js"></script>
<script>
    var adjustment;

    $("ol.ol-drag").sortable({
        group: 'ol-drag',
        pullPlaceholder: false,
        // animation on drop
        onDrop: function ($item, container, _super) {
            var $clonedItem = $('<li/>').css({ height: 0 });
            $item.before($clonedItem);
            $clonedItem.animate({ 'height': $item.height() }, 0);
            $item.animate($clonedItem.position(), 0,
                function () {
                    $clonedItem.detach();
                    _super($item, container);
                    console.log($("ol").find("li"));
                });
        },

        // set $item relative to cursor position
        onDragStart: function ($item, container, _super) {
            var offset = $item.offset(),
                pointer = container.rootGroup.pointer;

            adjustment = {
                left: pointer.left - offset.left,
                top: pointer.top - offset.top
            };

            _super($item, container);
        },
        onDrag: function ($item, position) {
            $item.css({
                left: position.left - adjustment.left,
                top: position.top - adjustment.top
            });
        }
    });


    $("#NextStep").click(function () {
        var list = [];
        var array = [];
        list = $("table.drag").find("tr").toArray();
        list.forEach(function (item, i) {
            array.push(item.cells[0].innerText);
        });
        console.log(array);
        $.ajax({
            url: "Comparing",
            type: "POST",
            data: { array: array },
            cache: false,
            dataType: 'json',
            success: function (result) {
                $("#Partial").html(result);
            }
        });
    })
</script>