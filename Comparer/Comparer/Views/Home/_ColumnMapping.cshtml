@using System.Data
@using DbComparer
@model DBTest.DatabaseComparer

<link rel="stylesheet" href="~/css/PartialViewCss/ColumnMapping.css" />
<div class="row">
    <div class="col-md-6">
        <h1>@Model.FirstDatabase.SelectedTable</h1>
        <ol class="vertical">
            @foreach (Database.Column item in Model.FirstDatabase.TableColumns)
            {
                <li class="" style="">
                    <table class="table table-bordered" id="source">
                        <tbody>
                            <tr>
                                <td style="text-align: -webkit-center">
                                    @if (@item.ISKey)
                                    {
                                        <img class="img-responsive" src="/images/icons8-key.svg" />
                                    }
                                </td>
                                <td>@item.Name</td>
                                <td>@item.Type</td>
                                <td class="arrow_box">@item.Length</td>
                            </tr>
                        </tbody>
                    </table>
                </li>
            }
        </ol>
    </div>
    <div class="col-md-6">
        <h1>@Model.SecondDatabase.SelectedTable</h1>
        <ol class="ol-drag vertical">
            @foreach (Database.Column item in Model.SecondDatabase.TableColumns)
            {
                <li class="" style="">
                    <table class="table table-bordered" id="target">
                        <tbody>
                            <tr>
                                <td style="text-align: -webkit-center">
                                    @if (@item.ISKey)
                                    {
                                        <img class="img-responsive" src="/images/icons8-key.svg" />
                                    }
                                </td>
                                <td>@item.Name</td>
                                <td>@item.Type</td>
                                <td>@item.Length</td>
                            </tr>
                        </tbody>
                    </table>
                </li>
            }
        </ol>
    </div>
    <button type="button" class="btn-lg btn-block btn-primary-custom" id="GoToComparing">NEXT STEP</button>
    <button type="button" class="btn-lg btn-block btn-default-custom" id="GoTableInfo" style="margin-bottom:1.5vmin;">Step back</button>
</div>


<script src="~/js/Sortable.js"></script>
<script>
    function ValidateTypes() {
        var source_list = [];
        var target_list = [];
        source_list = $("table#source").find("tr").toArray();
        target_list = $("table#target").find("tr").toArray();
        for (var i = 0; i < source_list.length; i++) {
            if (i >= target_list.length) {
                $(source_list[i].cells[3]).addClass("block");
                continue;
            }
            if (source_list[i].cells[2].innerText != target_list[i].cells[2].innerText) {
                $(source_list[i].cells[3]).addClass("bad");
            } else {
                $(source_list[i].cells[3]).removeClass("bad");
            }
        }
    }

    $(function () {
        ValidateTypes();
    })
    var adjustment;

    $("ol.ol-drag").sortable({
        group: 'ol-drag',
        pullPlaceholder: false,
        // animation on drop
        onDrop: function ($item, container, _super) {
            var $clonedItem = $('<li/>').css({ height: 0 });
            $item.before($clonedItem);
            $clonedItem.animate({ 'height': $item.height() }, 0);
            $item.animate($clonedItem.position(), 0,
                function () {
                    $clonedItem.detach();
                    _super($item, container);
                    console.log($("ol").find("li"));
                });
            ValidateTypes();
        },

        // set $item relative to cursor position
        onDragStart: function ($item, container, _super) {
            var offset = $item.offset(),
                pointer = container.rootGroup.pointer;

            adjustment = {
                left: pointer.left - offset.left,
                top: pointer.top - offset.top
            };

            _super($item, container);
        },
        onDrag: function ($item, position) {
            $item.css({
                left: position.left - adjustment.left,
                top: position.top - adjustment.top
            });
        }
    });


    $("#GoToComparing").click(function () {
        var list = [];
        var array = [];
        list = $("table#target").find("tr").toArray();
        list.forEach(function (item, i) {
            array.push(item.cells[1].innerText);
        });
        console.log(array);
        $.ajax({
            url: "Comparing",
            type: "POST",
            data: { array: array },
            success: function (result) {
                $("#Partial").html(result);
            }
        });
    })
</script>
