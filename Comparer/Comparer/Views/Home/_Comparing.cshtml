@using System.Data
@using DBTest
@model DBTest.DatabaseComparer

@{
    var FirstToSecond = @Model.ComparingResult[1];
    var SecondToFirst = @Model.ComparingResult[2];

    var FirstToSecond_unique = @Model.ComparingResult[3];
    var SecondToFirst_unique = @Model.ComparingResult[4];
}

<div class="container">
    <h3 class="text-center">Comparing results</h3>
    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#home">First table difference</a></li>
        <li><a data-toggle="tab" href="#menu1">Two table difference</a></li>
        <li><a data-toggle="tab" href="#menu2">Second table difference</a></li>
    </ul>

    <div class="tab-content">
        <div id="home" class="tab-pane fade in active">
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th class="text-center"><input type="checkbox" id="checkAllFirstDatabase" checked /><span id="checkAllFirstDatabaseText">Uncheck all</span></th>
                        @for (int i = 0; i < @Model.FirstDatabase.SelectedColumns.Count; i++)
                        {
                            <th>  @Model.FirstDatabase.SelectedColumns[i].Name  </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < FirstToSecond.Count; i++)
                    {
                        List<string> temp = FirstToSecond[i].ToList();
                        <tr>
                            <td class="warning text-center"> <input type="checkbox" name="FirstDatabaseCheckbox" checked value="@i"></td>
                            @for (int j = 0; j < temp.Count; j++)
                            {
                                <td class="success">
                                    @temp[j]
                                </td>
                            }
                        </tr>
                    }
                    @for (int i = 0; i < FirstToSecond_unique.Count; i++)
                    {
                        List<string> temp = FirstToSecond_unique[i].ToList();
                        <tr>
                            <td class="warning text-center"> <input type="checkbox" name="FirstDatabaseCheckboxUnique" checked value="@i"></td>
                            @for (int j = 0; j < temp.Count; j++)
                            {
                                <td class="danger">
                                    @temp[j]
                                </td>
                            }
                        </tr>
                    }

                </tbody>
            </table>
            <div class="container-fluid">
                <div class="panel-group">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" href="#collapse1">Generate script for update database</a>
                            </h4>
                        </div>
                        <div id="collapse1" class="panel-collapse collapse">
                            <div class="panel-body">
                                <pre>
                                <code readonly class="language-sql" id="Res1">
                                    </code>
                                </pre>
                                @*  <textarea readonly class="form-control disabled" rows="3" id="Res1"></textarea>*@
                                <hr />
                                <button id="1" class="btn-block btn-default btn-primary-custom ColapsableScript">Start update</button>
                            </div>
                            <div class="panel-footer">
                                link for download db <a href="#">Updated DB</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="menu1" class="tab-pane fade">
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th class="text-center"><input type="checkbox" id="checkAllFromTwo" checked /><span id="checkAllFromTwoText">Uncheck all</span></th>

                        @for (int i = 0; i < @Model.FirstDatabase.SelectedColumns.Count; i++)
                        {
                            <th>  @Model.FirstDatabase.SelectedColumns[i].Name  </th>
                            <th>  @Model.SecondDatabase.SelectedColumns[i].Name  </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @{
                        int maxRange = Math.Max(SecondToFirst.Count, FirstToSecond.Count);
                    }
                    @for (int i = 0; i < maxRange; i++)
                    {
                        List<string> error = new List<string>() { "none", "none" };

                        List<string> temp = i > FirstToSecond.Count ? temp = error : temp = FirstToSecond[i].ToList();
                        List<string> temp2 = i > SecondToFirst.Count ? temp2 = error : temp2 = SecondToFirst[i].ToList();

                        int columnNumber = Math.Max(temp.Count, temp2.Count);
                        <tr>
                            <td class="warning text-center"> <input type="checkbox" name="FromTwoDatabaseCheckbox" checked value="@i"></td>

                            @for (int j = 0; j < columnNumber; j++)
                            {
                                <td class="warning">
                                    @temp[j]
                                </td>
                                <td class="danger">
                                    @temp2[j]
                                </td>
                            }
                        </tr>

                    }
                </tbody>
            </table>
            <div class="container-fluid">
                <div class="panel-group">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" href="#collapse3">Generate script for update database</a>
                            </h4>
                        </div>
                        <div id="collapse3" class="panel-collapse collapse">
                            <div class="panel-body">
                                <pre>
                                <code readonly class="language-sql" id="Res2">
                                    </code>
                                </pre>                                <hr />
                                <button id="2" class="btn-block btn-default btn-primary-custom ColapsableScript">Start update</button>
                            </div>
                            <div class="panel-footer">
                                link for download db <a href="#">Updated DB</a>
                            </div>
                        </div>
                    </div>-
                </div>
            </div>
        </div>
        <div id="menu2" class="tab-pane fade">
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th class="text-center"><input type="checkbox" id="checkAllSecondDatabase" checked /><span id="checkAllSecondDatabaseText">Uncheck all</span></th>
                        @for (int i = 0; i < @Model.SecondDatabase.SelectedColumns.Count; i++)
                        {
                            <th>  @Model.SecondDatabase.SelectedColumns[i].Name  </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < SecondToFirst.Count; i++)
                    {
                        List<string> temp = SecondToFirst[i].ToList();
                        <tr>
                            <td class="warning text-center"> <input type="checkbox" name="SecondDatabaseCheckbox" checked value="@i"></td>

                            @for (int j = 0; j < temp.Count; j++)
                            {
                                <td class="success">
                                    @temp[j]
                                </td>
                            }

                        </tr>
                    }

                    @for (int i = 0; i < SecondToFirst_unique.Count; i++)
                    {
                        List<string> temp = SecondToFirst_unique[i].ToList();
                        <tr>
                            <td class="warning text-center"> <input type="checkbox" name="SecondDatabaseCheckboxUnique" checked value="@i"></td>
                            @for (int j = 0; j < temp.Count; j++)
                            {
                                <td class="success">
                                    @temp[j]
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
            <div class="container-fluid">
                <div class="panel-group">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" href="#collapse2">Generate script for update database</a>
                            </h4>
                        </div>
                        <div id="collapse2" class="panel-collapse collapse">
                            <div class="panel-body">
                                <pre>
                                <code readonly class="language-sql" id="Res3">
                                    </code>
                                </pre>                                <hr />
                                <button id="3" class="btn-block btn-default btn-primary-custom ColapsableScript">Start update</button>
                            </div>
                            <div class="panel-footer">
                                link for download db <a href="#">Updated DB</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<button type="button" class="btn-lg btn-block btn-default-custom" id="Back" style="margin-bottom:1.5vmin;">STEP BACK</button>

<div class="container-fluid">
    <button class="btn btn-primary btn-block" onclick="download('HTML_report.html', 'text/plain')">Generate</button>
    <a href="" id="a">click here to download your file</a>
</div>

<script type="text/javascript">
    $(function () {
        var buttons = $(".ColapsableScript").toArray();
        buttons.forEach(function (item, i) {
            $(item).click(function () {
                waitingDialog.show();
                var id = this.id;
                var arrayN = null;
                var arrayU = null;
                switch (id) {
                    case "1":
                        {
                            arrayN = ValueCheckbox("FirstDatabaseCheckbox");
                            arrayU = ValueCheckbox("FirstDatabaseCheckboxUnique");
                            break;
                        };
                    case "2":
                        {
                            arrayN = ValueCheckbox("FromTwoDatabaseCheckbox");
                            arrayU = [];
                            break;
                        }
                    case "3":
                        {
                            arrayN = ValueCheckbox("SecondDatabaseCheckbox");
                            arrayU = ValueCheckbox("SecondDatabaseCheckboxUnique");
                            break;
                        };
                    default:
                        return;
                }
                $.ajax({
                    async: true,
                    url: "CreateScript",
                    type: "POST",
                    data: { id: id, arrayN: arrayN, arrayU: arrayU },
                    success: function (result) {
                        waitingDialog.hide();
                        var sql = result.insert + result.update;
                        document.getElementById("Res" + id).innerText = sql;
                        $.getScript("/js/prism.js", function (jqxhr) {
                            console.log(jqxhr.status); // 200
                        });
                    }
                });
            });
        });

        $("#Back").click(function () {
            waitingDialog.show();
            $.ajax({
                url: "ColumnMapping",
                type: "POST",
                success: function (result) {
                    waitingDialog.hide();
                    $("#Partial").html(result);
                }
            });
        });

        function ValueCheckbox(name) {
            var chkArray = [];
            $("input[name = '" + name + "']:checked").each(function () {
                chkArray.push($(this).val());
            });
            return chkArray;
        }

        $("#checkAllFirstDatabase").change(function () {
            $("input[name = 'FirstDatabaseCheckbox']").prop('checked', $(this).prop("checked"));
            $("input[name = 'FirstDatabaseCheckboxUnique']").prop('checked', $(this).prop("checked"));

            var checked = $("#checkAllFirstDatabase").is(':checked');
            (checked === true) ? $("#checkAllFirstDatabaseText").text('Uncheck all') : $("#checkAllFirstDatabaseText").text('Check all');
        });
        $("#checkAllSecondDatabase").change(function () {
            $("input[name = 'SecondDatabaseCheckbox']").prop('checked', $(this).prop("checked"));
            $("input[name = 'SecondDatabaseCheckboxUnique']").prop('checked', $(this).prop("checked"));

            var checked = $("#checkAllSecondDatabase").is(':checked');
            (checked === true) ? $("#checkAllSecondDatabaseText").text('Uncheck all') : $("#checkAllSecondDatabaseText").text('Check all');
        });

        $("#checkAllFromTwo").change(function () {
            $("input[name = 'FromTwoDatabaseCheckbox']").prop('checked', $(this).prop("checked"));

            var checked = $("#checkAllFromTwo").is(':)checked');
            (checked === true) ? $("#checkAllFromTwoText").text('Uncheck all') : $("#checkAllFromTwoText").text('Check all');
        });
    });

    var arrayN_F = [];
    var arrayU_F = [];
    ///creating string for first table report
    var firstToSecondJson =  @Html.Raw(Json.Serialize(FirstToSecond));
    var firstToSecondUniqueJson =  @Html.Raw(Json.Serialize(FirstToSecond_unique));
    var firstToSecondJsonAddInf =  @Html.Raw(Json.Serialize(@Model.FirstDatabase.SelectedColumns));
    var firstTableStr = '';
    var firstTableLen = Object.keys(firstToSecondJson).length;
    var firstTableUniqueLen = Object.keys(firstToSecondUniqueJson).length;
    firstTableStr += '<table>';
    firstTableStr += '<thead>';
    firstTableStr += '<tr>';
     for (var i = 0; i <  @Html.Raw(Json.Serialize(@Model.FirstDatabase.SelectedColumns.Count)); i++)
     {
         arrayN_F.push(i);
         firstTableStr += '<th>';
         firstTableStr += '<strong>';
         firstTableStr += firstToSecondJsonAddInf[i].name; 
         firstTableStr += '</strong>';
         firstTableStr += '</th >';
    }
    firstTableStr += '</tr>';
    firstTableStr += '<thead>';
        for (var i = 0; i < firstTableLen; i++) {
            firstTableStr += '<tr>';
            for (var j = 0; j < firstToSecondJson[i].length; j++) {
                firstTableStr += '<th>';
                firstTableStr += firstToSecondJson[i][j];
                firstTableStr += '</th>';
            }
            firstTableStr += '</tr>';
    }
    for (var i = 0; i < firstTableUniqueLen; i++) {
        arrayU_F.push(i);
        firstTableStr += '<tr>';
        for (var j = 0; j < firstToSecondUniqueJson[i].length; j++) {
            firstTableStr += '<th>';
            firstTableStr += firstToSecondUniqueJson[i][j];
            firstTableStr += '</th>';
        }
        firstTableStr += '</tr>';
    }
        firstTableStr += '</table>';


    var arrayN_S = [];
    var arrayU_S = [];
    ///creating string for second table report
    var secondToFirstJson =  @Html.Raw(Json.Serialize(SecondToFirst));
    var secondToFirstUniqueJson =  @Html.Raw(Json.Serialize(SecondToFirst_unique));
    var secondTofirstJsonAddInf =  @Html.Raw(Json.Serialize(@Model.SecondDatabase.SelectedColumns));
    var secondTableStr = '';
    var secondTableLen = Object.keys(secondToFirstJson).length;
    var secondTableUniqueLen = Object.keys(secondToFirstUniqueJson).length;
    secondTableStr += '<table>';
    secondTableStr += '<thead>';
    secondTableStr += '<tr>';
     for (var i = 0; i <  @Html.Raw(Json.Serialize(@Model.SecondDatabase.SelectedColumns.Count)); i++)
     {
         arrayN_S.push(i);
         secondTableStr += '<th>';
         secondTableStr += secondTofirstJsonAddInf[i].name; 
         secondTableStr += '</th >';
    }
    secondTableStr += '</tr>';
    secondTableStr += '<thead>';
    for (var i = 0; i < secondTableLen; i++) {
        secondTableStr += '<tr>';
        for (var j = 0; j < secondToFirstJson[i].length; j++) {
                secondTableStr += '<th>';
            secondTableStr += secondToFirstJson[i][j];
                secondTableStr += '</th>';
            }
            secondTableStr += '</tr>';
    }
    for (var i = 0; i < secondTableUniqueLen; i++) {
        arrayU_S.push(i);
        secondTableStr += '<tr>';
        for (var j = 0; j < secondToFirstUniqueJson[i].length; j++) {
            secondTableStr += '<th>';
            secondTableStr += secondToFirstUniqueJson[i][j];
            secondTableStr += '</th>';
        }
        secondTableStr += '</tr>';
    }
    secondTableStr += '</table>';


    ///creating string for third table report
    var thirdTableStr = '';
    thirdTableStr += '<table>';
    thirdTableStr += '<thead>';
    thirdTableStr += '<tr>';
     for (var i = 0; i <  @Html.Raw(Json.Serialize(@Model.SecondDatabase.SelectedColumns.Count)); i++)
                        {
         thirdTableStr += '<th>';
         thirdTableStr += firstToSecondJsonAddInf[i].name +" / " + secondTofirstJsonAddInf[i].name; 
         thirdTableStr += '</th >';
    }
    thirdTableStr += '</tr>';
    thirdTableStr += '<thead>';
    for (var i = 0; i < secondTableLen; i++) {
        thirdTableStr += '<tr>';
        for (var j = 0; j < secondToFirstJson[i].length; j++) {
            thirdTableStr += '<th>';
            thirdTableStr += firstToSecondJson[i][j]+ " / " +secondToFirstJson[i][j];
            thirdTableStr += '</th>';
            }
        thirdTableStr += '</tr>';
    }
    
    thirdTableStr += '</table>';

    function createHtml(firstTableStr, secondTableStr, thirdTableStr, firstScript, secondScript ) {
        var smallHtmlReport = '<div class="containerData">' +
            '        <style>' +
            '            table {' +
            '                border-collapse: collapse;' +
            '                border-spacing: 0;' +
            '                width: 100%;' +
            '                border: 0.vmin solid #ddd;' +
            '            }' +
            '' +
            '            th,' +
            '            td {' +
            '                text-align: left;' +
            '                padding: 8px;' +
            '            }' +
            '' +
            '           thead {' +
            '                border-bottom: 2px solid black;'+
            '            }' +
            '' +
            '            tr:nth-child(even) {' +
            '                background-color: #40739e;' +
            '                color: white;' +
            '            }' +
            '' +
            '            tbody {' +
            '                background-color: #dfe6e9;' +
            '                color: white;' +
            '            }' +
            '            #reportHeader {' +
            '                background-color: #40739e;' +
            '                height: 10vmin;' +
            '                color: white;' +
            '                display: flex;' +
            '                justify-content: center;' +
            '                align-items: center;' +
            '            }' +
            '' +
            '            .diffBtn {' +
            '                color: #40739e;' +
            '                background-color: white;' +
            '                border: solid #40739e 0.3vmin;' +
            '                transition: all 0.5s ease;' +
            '                font-size: 1.5em;' +
            '                border: none;' +
            '            }' +
            '' +
            '            .diffBtn:hover {' +
            '                background: #40739e;' +
            '                color: #ddd;' +
            '            }' +
            '' +
            '            .diffDiv {' +
            '                margin-left: 1.5vmin;' +
            '                padding: 0.5vmin;' +
            '                border-bottom: #40739e 1vmax solid;' +
            '            }' +
            '' +
            '           ' +
            '        </style>' +
            '' +
            '        <div id="reportHeader">' +
            '            <h2>Comparing results</h2>' +
            '        </div>' +
            '        <div class="diffDiv">' +
            '            <h2>Differences in first database table:</h2>' +
            '            <button class="diffBtn" id="firstTableRes" onclick="ShowResFT(\'firstTableResDiv\',\'firstTableRes\')">Show result</button>' +
            '            <button class="diffBtn" id="firstTableScript" onclick="ShowScriptFT(\'firstTableScriptDiv\',\'firstTableScript\')">Show script</button>' +
            '            <div style="overflow-x:auto; display: none;" id="firstTableResDiv">' + firstTableStr +
            '            </div>' +
            '            <div id="firstTableScriptDiv" style="display: none">' +
            '                <hr>' +
            '                <pre>' +
            firstScript +
            '                </pre>' +
            '            </div>' +
            '        </div>' +
            '        <hr>' +
            '        <div class="diffDiv">' +
            '            <h2>Differences in second database table:</h2>' +
            '            <button class="diffBtn" id="secondTableRes" onclick="ShowResFT(\'secondTableResDiv\',\'secondTableRes\')">Show results</button>' +
            '            <button class="diffBtn" id="secondTableScript" onclick="ShowScriptFT(\'secondTableScriptDiv\',\'secondTableScript\')">Show script</button>' +
            '            <div style="overflow-x:auto;display: none;" id="secondTableResDiv">' +
            secondTableStr +
            '            </div>' +
            '            <div id="secondTableScriptDiv" style="display: none">' +
            '                <hr>' +
            '                <pre>' +
            secondScript +
            '                    </pre>' +
            '            </div>' +
            '        </div>' +
            '        <hr>' +
            '        <div class="diffDiv">' +
            '            <h2>Differences in first and second database tables:</h2>' +
            '            <button class="diffBtn" id="twiceTableRes" onclick="ShowResFT(\'twiceTableResDiv\',\'twiceTableRes\')">Show results</button>' +
            '            <button class="diffBtn" id="twiceTableScript" onclick="ShowScriptFT(\'twiceTableScriptDiv\',\'twiceTableScript\')">Show script</button>' +
            '            <div style="overflow-x:auto; display: none " id="twiceTableResDiv">' + thirdTableStr +

            '            </div>' +
            '            <div id="twiceTableScriptDiv" style="display: none">' +
            '                <hr>' +
            '                <pre>' +                               
            firstScript + 
            '               </pre>' +
            '                <hr>' +
            '                <pre>' +
            secondScript +
            '               </pre>' +
            '                <hr>' +
            '            </div>' +
            '        </div>' +
            '        <hr>' +
            '    </div>' +
            '    <script>' +
            '        function ShowResFT(idDiv, idBtn) {' +
            '            var x = document.getElementById(idDiv);' +
            '            if (x.style.display === "none") {' +
            '                x.style.display = "block";' +
            '                document.getElementById(idBtn).innerText = "Hide result";' +
            '' +
            '            } else {' +
            '                x.style.display = "none";' +
            '                document.getElementById(idBtn).innerText = "Show result";' +
            '            }' +
            '        }' +
            '' +
            '        function ShowScriptFT(idDiv, idBtn) {' +
            '            var x = document.getElementById(idDiv);' +
            '            if (x.style.display === "none") {' +
            '                x.style.display = "block";' +
            '                document.getElementById(idBtn).innerText = "Hide script";' +
            '' +
            '            } else {' +
            '                x.style.display = "none";' +
            '                document.getElementById(idBtn).innerText = "Show script";' +
            '            }' +
            '        }' +
            '    <' + '/script>';
        return smallHtmlReport;
    }

    var scriptFT = "";
    var scriptST = "";
    $.ajax({
        async: true,
        url: "CreateScript",
        type: "POST",
        data: { id: 1, arrayN: arrayN_F, arrayU: arrayU_F },
        success: function (result) {
            scriptFT = result.insert + result.update;
        }
    });
    $.ajax({
        async: true,
        url: "CreateScript",
        type: "POST",
        data: { id: 2, arrayN: arrayN_S, arrayU: arrayU_S },
        success: function (result) {
            scriptST = result.insert + result.update;
        }
    });

    function download(name, type) {
        alert(scriptFT);
        alert(scriptST);
        var html = createHtml(firstTableStr, secondTableStr, thirdTableStr, scriptFT, scriptST );
        var a = document.getElementById("a");
        var file = new Blob([html], {
            type: type
        });
        a.href = URL.createObjectURL(file);
        a.download = name;
    }
</script>




