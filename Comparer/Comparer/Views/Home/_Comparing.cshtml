@using System.Data
@using DBTest
@model DBTest.DatabaseComparer

@{
    var firstToSecond = @Model.ComparingResult[1];
    var secondToFirst = @Model.ComparingResult[2];

    var firstToSecondUnique = @Model.ComparingResult[3];
    var secondToFirstUnique = @Model.ComparingResult[4];
}
<style>
    #a {
        color: #487eb0;
        text-decoration: none;
    }

        #a:hover, #a:active {
            color: white;
            text-decoration: none;
        }
</style>
<div class="container">
    <h3 class="text-center">Результати порівняння</h3>
    <ul class="nav nav-tabs">
        <li><a data-toggle="tab" href="#menu1">Відмінності у першій таблиці</a></li>
        <li class="active"><a data-toggle="tab" href="#home">Відмінності у обох таблицях</a></li>
        <li><a data-toggle="tab" href="#menu2">Відмінності у другій таблиці</a></li>
    </ul>

    <div class="tab-content">
        <div id="menu1" class="tab-pane fade">
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th class="text-center"><input type="checkbox" id="checkAllFirstDatabase" checked /><span id="checkAllFirstDatabaseText">Зняти вибір</span></th>
                        @for (int i = 0; i < @Model.FirstDatabase.SelectedColumns.Count; i++)
                        {
                            <th>  @Model.FirstDatabase.SelectedColumns[i].Name  </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < firstToSecond.Count; i++)
                    {
                        var temp = firstToSecond[i].ToList();
                        <tr>
                            <td class="warning text-center"> <input type="checkbox" name="FirstDatabaseCheckbox" checked value="@i"></td>
                            @for (int j = 0; j < temp.Count; j++)
                            {
                                <td class="success dataTd_source_first">
                                    @temp[j]
                                </td>
                            }
                        </tr>
                    }
                    @for (int i = 0; i < firstToSecondUnique.Count; i++)
                    {
                        List<string> temp = firstToSecondUnique[i].ToList();
                        <tr>
                            <td class="warning text-center"> <input type="checkbox" name="FirstDatabaseCheckboxUnique" checked value="@i"></td>
                            @for (int j = 0; j < temp.Count; j++)
                            {
                                <td class="danger dataTd_source_first">
                                    @temp[j]
                                </td>
                            }
                        </tr>
                    }

                </tbody>
            </table>
            <div class="container-fluid">
                <div class="panel-group">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" href="#collapse1">Відобразити скрипт </a>
                            </h4>
                        </div>
                        <div id="collapse1" class="panel-collapse collapse">
                            <div class="panel-body">
                                <pre>
                                <code readonly class="language-sql" id="Res1">
                                    </code>
                                </pre>
                                @*  <textarea readonly class="form-control disabled" rows="3" id="Res1"></textarea>*@
                                <hr />
                                <button id="1" class="btn-block btn-default btn-primary-custom ColapsableScript">
                                    Згенерувати скрипт на вставку та оновлення даних для першої бд ...
                                </button>
                            </div>
                            <div class="panel-footer">
                                link for download db <a href="#">Updated DB</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="home" class="tab-pane fade in active">
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th class="text-center"><input type="checkbox" id="checkAllFromTwo" checked /><span id="checkAllFromTwoText">Зняти вибір</span></th>

                        @for (int i = 0; i < @Model.FirstDatabase.SelectedColumns.Count; i++)
                        {
                            <th>  @Model.FirstDatabase.SelectedColumns[i].Name  </th>
                            <th>  @Model.SecondDatabase.SelectedColumns[i].Name  </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @{
                        int maxRange = Math.Max(secondToFirst.Count, firstToSecond.Count);
                    }
                    @for (int i = 0; i < maxRange; i++)
                    {
                        var error = new List<string>() { "none", "none" };

                        List<string> temp = i > firstToSecond.Count ? temp = error : temp = firstToSecond[i].ToList();
                        List<string> temp2 = i > secondToFirst.Count ? temp2 = error : temp2 = secondToFirst[i].ToList();

                        var columnNumber = Math.Max(temp.Count, temp2.Count);
                        <tr>
                            <td class="text-center"> <input type="checkbox" name="FromTwoDatabaseCheckbox" checked value="@i"></td>

                            @for (var j = 0; j < columnNumber; j++)
                            {
                                <td class="warning dataTd_source">
                                    @temp[j]
                                </td>
                                <td class="danger dataTd_target">
                                    @temp2[j]
                                </td>
                            }
                        </tr>
                    }
                    @for (int i = 0; i < firstToSecondUnique.Count; i++)
                    {
                        List<string> temp = firstToSecondUnique[i].ToList();
                        <tr>
                            <td class="warning text-center"> <input type="checkbox" name="FirstDatabaseCheckboxUnique" checked value="@i"></td>
                            @for (int j = 0; j < temp.Count; j++)
                            {
                                <td class="warning dataTd_source">
                                    @temp[j]
                                </td>

                                <td class="danger dataTd_target">
                                    none
                                </td>
                            }
                        </tr>
                    }
                    @for (int i = 0; i < secondToFirstUnique.Count; i++)
                    {
                        List<string> temp = secondToFirstUnique[i].ToList();
                        <tr>
                            <td class="warning text-center"> <input type="checkbox" name="FirstDatabaseCheckboxUnique" checked value="@i"></td>
                            @foreach (var t in temp)
                            {
                                <td class="warning dataTd_source">
                                    none
                                </td>
                                <td class="danger dataTd_target">
                                    @t
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
            <div class="container-fluid">
                <div class="panel-group">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" href="#collapse3">Відобразити скрипт</a>
                            </h4>
                        </div>
                        <div id="collapse3" class="panel-collapse collapse">
                            <div class="panel-body">
                                <pre>
                                <code readonly class="language-sql" id="Res2">
                                    </code>
                                </pre>                                <hr />
                                <button id="2" class="btn-block btn-default btn-primary-custom ColapsableScript">
                                    Згенерувати скрипт тільки на оновлення даних для першої та другої бд ... 
                                </button>
                            </div>
                            <div class="panel-footer">
                                link for download db <a href="#">Updated DB</a>
                            </div>
                        </div>
                    </div>-
                </div>
            </div>
        </div>
        <div id="menu2" class="tab-pane fade">
            <table class="table table-condensed">
                <thead>
                    <tr>
                        <th class="text-center"><input type="checkbox" id="checkAllSecondDatabase" checked /><span id="checkAllSecondDatabaseText">Зняти вибір</span></th>
                        @for (int i = 0; i < @Model.SecondDatabase.SelectedColumns.Count; i++)
                        {
                            <th>  @Model.SecondDatabase.SelectedColumns[i].Name  </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < secondToFirst.Count; i++)
                    {
                        List<string> temp = secondToFirst[i].ToList();
                        <tr>
                            <td class="warning text-center"> <input type="checkbox" name="SecondDatabaseCheckbox" checked value="@i"></td>

                            @for (int j = 0; j < temp.Count; j++)
                            {
                                <td class="success">
                                    @temp[j]
                                </td>
                            }

                        </tr>
                    }

                    @for (int i = 0; i < secondToFirstUnique.Count; i++)
                    {
                        List<string> temp = secondToFirstUnique[i].ToList();
                        <tr>
                            <td class="warning text-center"> <input type="checkbox" name="SecondDatabaseCheckboxUnique" checked value="@i"></td>
                            @for (int j = 0; j < temp.Count; j++)
                            {
                                <td class="success">
                                    @temp[j]
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
            <div class="container-fluid">
                <div class="panel-group">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" href="#collapse2">Відобразити скрипт</a>
                            </h4>
                        </div>
                        <div id="collapse2" class="panel-collapse collapse">
                            <div class="panel-body">
                                <pre>
                                <code readonly class="language-sql" id="Res3">
                                    </code>
                                </pre>                          
                                <hr />
                                <button id="3" class="btn-block btn-default btn-primary-custom ColapsableScript">
                                    Згенерувати скрипт на вставку та оновлення даних для другої бд ...
                                </button>
                            </div>
                            <div class="panel-footer">
                                link for download db <a href="#">Оновити БД</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <button class="btn btn-default-custom" onclick="download('HTML_report.html', 'text/plain')"> <a href="" id="a">Згенерувати HTML звіт</a></button>
    <br />
</div>
<button type="button" class="btn-lg btn-block btn-default-custom" id="Back" style="margin-bottom:1.5vmin;">Назад</button>

@*<div class="container-fluid">
        <button class="btn btn-primary btn-block" onclick="download('HTML_report.html', 'text/plain')"> <a href="" id="a">Generate</a></button>
        <a href="" id="a">click here to download your file</a>
        <button class="btn btn-primary btn-block" onclick="generatePdfReport()">Generate PDF</button>
    </div>*@
<script src="~/js/jspdf.min.js"></script>
<script type="text/javascript">

    //function func() {
    //    $("td.dataTd_source_first").each(function (i) {
    //        if ($(this).html() === $(this).next().html()) {
    //            console.log(i+"this"+$(this).html());
    //            console.log(i+"thisNext" +$(this).next().html());
    //            $(this).css({ 'border-left': '0.3vmin solid red' }).css({ 'border-top': '0.3vmin solid red' }).css({ 'border-bottom': '0.3vmin solid red' });
    //            $(this).next().css({ 'border-right': '0.3vmin solid red' }).css({ 'border-top': '0.3vmin solid red' }).css({ 'border-bottom': '0.3vmin solid red' });
    //            }
    //            });
    //};
    //setTimeout(func, 1000);

    function ShowDiff() {
        var len = $("td.dataTd_source").toArray().length;
        for (var i = 0; i < len; i++) {
            if ($("body").find("td.dataTd_source").eq(i).text() !== $("body").find("td.dataTd_target").eq(i).text()) {
                $("body").find("td.dataTd_source").eq(i).css({ 'border-left': '0.4vmin solid red' }).css({ 'border-bottom': '0.3vmin solid red' }).css({ 'border-top': '0.3vmin solid red' });
                $("body").find("td.dataTd_target").eq(i).css({ 'border-right': '0.4vmin solid red' }).css({ 'border-bottom': '0.3vmin solid red' }).css({ 'border-top': '0.3vmin solid red' });
            }
        }
    };
    setTimeout(ShowDiff, 450);

    $(function () {
        /// <summary></summary>
        var buttons = $(".ColapsableScript").toArray();
        buttons.forEach(function (item, i) {
            $(item).click(function () {
                waitingDialog.show("Завантаження даних...");
                var id = this.id;
                var arrayN = null;
                var arrayU = null;
                switch (id) {
                    case "1":
                        {
                            arrayN = ValueCheckbox("FirstDatabaseCheckbox");
                            arrayU = ValueCheckbox("FirstDatabaseCheckboxUnique");
                            break;
                        };
                    case "2":
                        {
                            arrayN = ValueCheckbox("FromTwoDatabaseCheckbox");
                            arrayU = [];
                            break;
                        }
                    case "3":
                        {
                            arrayN = ValueCheckbox("SecondDatabaseCheckbox");
                            arrayU = ValueCheckbox("SecondDatabaseCheckboxUnique");
                            break;
                        };
                    default:
                        return;
                }
                $.ajax({
                    async: true,
                    url: "CreateScript",
                    type: "POST",
                    data: { id: id, arrayN: arrayN, arrayU: arrayU },
                    success: function (result) {
                        waitingDialog.hide();
                        var text = "";
                        switch (id) {
                            case "1":
                            {
                                text = "Вставка даних:\n" + result.insert + "\n\nОновлення даних:\n" + result.update;
                                break;
                            };
                            case "2":
                            {
                                    text = "Оновлення даних з другої таблиці в першу:\n" + result.insert + "\n\nОновлення даних з першої таблиці в другу:\n" + result.update;
                                break;
                            };
                            case "3":
                            {
                                text = "Вставка даних:\n" + result.insert + "\n\nОновлення даних:\n" + result.update;
                                break;
                            };
                            default:
                                return;
                        }
                        document.getElementById("Res" + id).innerText = text;
                        $.getScript("/js/prism.js", function (jqxhr) {
                            console.log(jqxhr.status); // 200
                        });
                    }
                });
            });
        });

        $("#Back").click(function () {
            waitingDialog.show("Завантаження даних...");
            $.ajax({
                url: "ColumnMapping",
                type: "POST",
                success: function (result) {
                    waitingDialog.hide();
                    $("#Partial").html(result);
                }
            });
        });

        function ValueCheckbox(name) {
            var chkArray = [];
            $("input[name = '" + name + "']:checked").each(function () {
                chkArray.push($(this).val());
            });
            return chkArray;
        }

        $("#checkAllFirstDatabase").change(function () {
            $("input[name = 'FirstDatabaseCheckbox']").prop('checked', $(this).prop("checked"));
            $("input[name = 'FirstDatabaseCheckboxUnique']").prop('checked', $(this).prop("checked"));

            var checked = $("#checkAllFirstDatabase").is(':checked');
            (checked === true) ? $("#checkAllFirstDatabaseText").text('Uncheck all') : $("#checkAllFirstDatabaseText").text('Check all');
        });
        $("#checkAllSecondDatabase").change(function () {
            $("input[name = 'SecondDatabaseCheckbox']").prop('checked', $(this).prop("checked"));
            $("input[name = 'SecondDatabaseCheckboxUnique']").prop('checked', $(this).prop("checked"));

            var checked = $("#checkAllSecondDatabase").is(':checked');
            (checked === true) ? $("#checkAllSecondDatabaseText").text('Відмінити вибір') : $("#checkAllSecondDatabaseText").text('Обрати усі');
        });

        $("#checkAllFromTwo").change(function () {
            $("input[name = 'FromTwoDatabaseCheckbox']").prop('checked', $(this).prop("checked"));

            var checked = $("#checkAllFromTwo").is(':)checked');
            (checked === true) ? $("#checkAllFromTwoText").text('Відмінити вибір') : $("#checkAllFromTwoText").text('Обрати усі');
        });
    });
    //array for genetate script first table
    var arrayN_F = [];
    var arrayU_F = [];
    ///creating string for first table report
    var firstToSecondJson =  @Html.Raw(Json.Serialize(firstToSecond));
    var firstToSecondUniqueJson =  @Html.Raw(Json.Serialize(firstToSecondUnique));
    var firstToSecondJsonAddInf =  @Html.Raw(Json.Serialize(@Model.FirstDatabase.SelectedColumns));
    var firstTableStr = '';
    var firstTableLen = Object.keys(firstToSecondJson).length;
    var firstTableUniqueLen = Object.keys(firstToSecondUniqueJson).length;
    firstTableStr += '<table>';
    firstTableStr += '<thead>';
    firstTableStr += '<tr>';
     for (var i = 0; i <  @Html.Raw(Json.Serialize(@Model.FirstDatabase.SelectedColumns.Count)); i++)
     {

         firstTableStr += '<th>';
         firstTableStr += '<strong>';
         firstTableStr += firstToSecondJsonAddInf[i].name;
         firstTableStr += '</strong>';
         firstTableStr += '</th >';
    }
    firstTableStr += '</tr>';
    firstTableStr += '<thead>';
    for (var i = 0; i < firstTableLen; i++) {
        arrayN_F.push(i);
            firstTableStr += '<tr>';
            for (var j = 0; j < firstToSecondJson[i].length; j++) {
                firstTableStr += '<th>';
                firstTableStr += firstToSecondJson[i][j];
                firstTableStr += '</th>';
            }
            firstTableStr += '</tr>';
    }
    for (var i = 0; i < firstTableUniqueLen; i++) {
        arrayU_F.push(i);
        firstTableStr += '<tr>';
        for (var j = 0; j < firstToSecondUniqueJson[i].length; j++) {
            firstTableStr += '<th>';
            firstTableStr += firstToSecondUniqueJson[i][j];
            firstTableStr += '</th>';
        }
        firstTableStr += '</tr>';
    }
        firstTableStr += '</table>';
     //array for genetate script second table
    var arrayN_S = [];
    var arrayU_S = [];
    ///creating string for second table report
    var secondToFirstJson =  @Html.Raw(Json.Serialize(secondToFirst));
    var secondToFirstUniqueJson =  @Html.Raw(Json.Serialize(secondToFirstUnique));
    var secondTofirstJsonAddInf =  @Html.Raw(Json.Serialize(@Model.SecondDatabase.SelectedColumns));
    var secondTableStr = '';
    var secondTableLen = Object.keys(secondToFirstJson).length;
    var secondTableUniqueLen = Object.keys(secondToFirstUniqueJson).length;
    secondTableStr += '<table>';
    secondTableStr += '<thead>';
    secondTableStr += '<tr>';
     for (var i = 0; i <  @Html.Raw(Json.Serialize(@Model.SecondDatabase.SelectedColumns.Count)); i++)
     {
         secondTableStr += '<th>';
         secondTableStr += secondTofirstJsonAddInf[i].name;
         secondTableStr += '</th >';
    }
    secondTableStr += '</tr>';
    secondTableStr += '<thead>';
    for (var i = 0; i < secondTableLen; i++) {
        arrayN_S.push(i);
        secondTableStr += '<tr>';
        for (var j = 0; j < secondToFirstJson[i].length; j++) {
                secondTableStr += '<th>';
            secondTableStr += secondToFirstJson[i][j];
                secondTableStr += '</th>';
            }
            secondTableStr += '</tr>';
    }
    for (var i = 0; i < secondTableUniqueLen; i++) {
        arrayU_S.push(i);
        secondTableStr += '<tr>';
        for (var j = 0; j < secondToFirstUniqueJson[i].length; j++) {
            secondTableStr += '<th>';
            secondTableStr += secondToFirstUniqueJson[i][j];
            secondTableStr += '</th>';
        }
        secondTableStr += '</tr>';
    }
    secondTableStr += '</table>';


    ///creating string for third table report
    var thirdTableStr = '';
    thirdTableStr += '<table>';
    thirdTableStr += '<thead>';
    thirdTableStr += '<tr>';
     for (var i = 0; i <  @Html.Raw(Json.Serialize(@Model.SecondDatabase.SelectedColumns.Count)); i++)
                        {
         thirdTableStr += '<th>';
         thirdTableStr += firstToSecondJsonAddInf[i].name +" / " + secondTofirstJsonAddInf[i].name;
         thirdTableStr += '</th >';
    }
    thirdTableStr += '</tr>';
    thirdTableStr += '<thead>';
    for (var i = 0; i < secondTableLen; i++) {
        thirdTableStr += '<tr>';
        for (var j = 0; j < secondToFirstJson[i].length; j++) {
            thirdTableStr += '<th>';
            thirdTableStr += firstToSecondJson[i][j]+ " / " +secondToFirstJson[i][j];
            thirdTableStr += '</th>';
            }
        thirdTableStr += '</tr>';
    }

    thirdTableStr += '</table>';

    function createHtml(firstTableStr, secondTableStr, thirdTableStr, firstScript, secondScript, numRowsFT, numRowsST,
        numSameFT, numSameST, numUniqueFT, numUniqueST, numDiffFT, numDiffST ) {
        var smallHtmlReport = '<div class="containerData">' +
            '        <style>' +
            '            table {' +
            '                border-collapse: collapse;' +
            '                border-spacing: 0;' +
            '                width: 100%;' +
            '                border: 0.vmin solid #ddd;' +
            '            }' +
            '' +
            '            th,' +
            '            td {' +
            '                text-align: left;' +
            '                padding: 8px;' +
            '            }' +
            '' +
            '           thead {' +
            '                border-bottom: 2px solid black;'+
            '            }' +
            '' +
            '            tr:nth-child(even) {' +
            '                background-color: #40739e;' +
            '                color: white;' +
            '            }' +
            '' +
            '            tbody {' +
            '                background-color: #dfe6e9;' +
            '                color: white;' +
            '            }' +
            '            #reportHeader {' +
            '                background-color: #40739e;' +
            '                height: 10vmin;' +
            '                color: white;' +
            '                display: flex;' +
            '                justify-content: center;' +
            '                align-items: center;' +
            '            }' +
            '' +
            '            .diffBtn {' +
            '                color: #40739e;' +
            '                background-color: white;' +
            '                border: solid #40739e 0.3vmin;' +
            '                transition: all 0.5s ease;' +
            '                font-size: 1.5em;' +
            '                border: none;' +
            '            }' +
            '' +
            '            .diffBtn:hover {' +
            '                background: #40739e;' +
            '                color: #ddd;' +
            '            }' +
            '' +
            '            .diffDiv {' +
            '                margin-left: 1.5vmin;' +
            '                padding: 0.5vmin;' +
            '                border-bottom: #40739e 1vmax solid;' +
            '            }' +
            '#comparingDiv {' +
            '                display: flex;' +
            '                flex-direction: row;' +
            '                justify-content: center;' +
            '' +
            '            }' +
            '' +
            '            #comparingDiv-left {' +
            '                padding-right: 1.5vmin;' +
            '                border-right: #40739e solid 0.1vmin;' +
            '            }' +
            '' +
            '            #comparingDiv-right {' +
            '                padding-left: 1.5vmin;' +
            '                border-left: #40739e solid 0.1vmin;' +
            '            }' +
            '        </style>' +
            '' +
            '        <div id="reportHeader">' +
            '            <h2>Comparing results</h2>' +
            '        </div>' +
            '        <div id="comparingDiv">' +
            '            <div id="comparingDiv-left">' +
            '                <h2>Table1</h2>' +
            '                <hr>' +
            '                <h3>Namber of rows</h3>' +
            '                <h5>' + numRowsFT + '</h5>' +
            '                <hr>' +
            '                <h3>Namber of same rows</h3>' +
            '                <h5>' + numSameFT + '</h5>' +
            '                <hr>' +
            '                <h3>Namber of unique rows</h3>' +
            '                <h5>' + numUniqueFT + '</h5>' +
            '                <hr>' +
            '                <h3>Namber of different rows</h3>' +
            '                <h5>' + numDiffFT + '</h5>' +
            '                <hr>' +
            '            </div>' +
            '            <div id="comparingDiv-right">' +
            '                <h2>Table2</h2>' +
            '                <hr>' +
            '                <h3>Namber of rows</h3>' +
            '                <h5>' + numRowsST + '</h5>' +
            '                <hr>' +
            '                <h3>Namber of same rows</h3>' +
            '                <h5>' + numSameST + '</h5>' +
            '                <hr>' +
            '                <h3>Namber of unique rows</h3>' +
            '                <h5>' + numUniqueST + '</h5>' +
            '                <hr>' +
            '                <h3>Namber of different rows</h3>' +
            '                <h5>' + numDiffST + '</h5>' +
            '                <hr>' +
            '            </div>' +
            '        </div>' +
            '        <div id="reportHeader">' +
            '            <h2>Tables with results and scripts</h2>' +
            '        </div>'+
            '        <div class="diffDiv">' +
            '            <h2>Differences in first database table:</h2>' +
            '            <button class="diffBtn" id="firstTableRes" onclick="ShowResFT(\'firstTableResDiv\',\'firstTableRes\')">Show result</button>' +
            '            <button class="diffBtn" id="firstTableScript" onclick="ShowScriptFT(\'firstTableScriptDiv\',\'firstTableScript\')">Show script</button>' +
            '            <div style="overflow-x:auto; display: none;" id="firstTableResDiv">' + firstTableStr +
            '            </div>' +
            '            <div id="firstTableScriptDiv" style="display: none">' +
            '                <hr>' +
            '                <pre>' +
            firstScript +
            '                </pre>' +
            '            </div>' +
            '        </div>' +
            '        <hr>' +
            '        <div class="diffDiv">' +
            '            <h2>Differences in second database table:</h2>' +
            '            <button class="diffBtn" id="secondTableRes" onclick="ShowResFT(\'secondTableResDiv\',\'secondTableRes\')">Show results</button>' +
            '            <button class="diffBtn" id="secondTableScript" onclick="ShowScriptFT(\'secondTableScriptDiv\',\'secondTableScript\')">Show script</button>' +
            '            <div style="overflow-x:auto;display: none;" id="secondTableResDiv">' +
            secondTableStr +
            '            </div>' +
            '            <div id="secondTableScriptDiv" style="display: none">' +
            '                <hr>' +
            '                <pre>' +
            secondScript +
            '                    </pre>' +
            '            </div>' +
            '        </div>' +
            '        <hr>' +
            '        <div class="diffDiv">' +
            '            <h2>Differences in first and second database tables:</h2>' +
            '            <button class="diffBtn" id="twiceTableRes" onclick="ShowResFT(\'twiceTableResDiv\',\'twiceTableRes\')">Show results</button>' +
            '            <button class="diffBtn" id="twiceTableScript" onclick="ShowScriptFT(\'twiceTableScriptDiv\',\'twiceTableScript\')">Show script</button>' +
            '            <div style="overflow-x:auto; display: none " id="twiceTableResDiv">' + thirdTableStr +

            '            </div>' +
            '            <div id="twiceTableScriptDiv" style="display: none">' +
            '                <hr>' +
            '                <pre>' +
            firstScript +
            '               </pre>' +
            '                <hr>' +
            '                <pre>' +
            secondScript +
            '               </pre>' +
            '                <hr>' +
            '            </div>' +
            '        </div>' +
            '        <hr>' +
            '    </div>' +
            '    <script>' +
            '        function ShowResFT(idDiv, idBtn) {' +
            '            var x = document.getElementById(idDiv);' +
            '            if (x.style.display === "none") {' +
            '                x.style.display = "block";' +
            '                document.getElementById(idBtn).innerText = "Hide result";' +
            '' +
            '            } else {' +
            '                x.style.display = "none";' +
            '                document.getElementById(idBtn).innerText = "Show result";' +
            '            }' +
            '        }' +
            '' +
            '        function ShowScriptFT(idDiv, idBtn) {' +
            '            var x = document.getElementById(idDiv);' +
            '            if (x.style.display === "none") {' +
            '                x.style.display = "block";' +
            '                document.getElementById(idBtn).innerText = "Hide script";' +
            '' +
            '            } else {' +
            '                x.style.display = "none";' +
            '                document.getElementById(idBtn).innerText = "Show script";' +
            '            }' +
            '        }' +
            '    <' + '/script>';
        return smallHtmlReport;
    }

    var scriptFT = "";
    var scriptST = "";
    $(function () {
        $.ajax({
            async: true,
            url: "CreateScript",
            type: "POST",
            data: { id: 1, arrayN: arrayN_F, arrayU: arrayU_F },
            success: function (result) {
                scriptFT = result.insert + result.update;
            }
        });
        $.ajax({
            async: true,
            url: "CreateScript",
            type: "POST",
            data: { id: 3, arrayN: arrayN_S, arrayU: arrayU_S },
            success: function (result) {
                scriptST = result.insert + result.update;
            }
        });
    });
     //number of rows in table
    var Statistic_rows_FT = @Html.Raw(Json.Serialize(Model.AdditionalInfo.Rows[1]));
    var Statistic_rows_ST = @Html.Raw(Json.Serialize(Model.AdditionalInfo.Rows[2]));
    //number of same row in table
    var Statistic_same_FT = @Html.Raw(Json.Serialize(Model.AdditionalInfo.Same[1]));
    var Statistic_same_ST = @Html.Raw(Json.Serialize(Model.AdditionalInfo.Same[2]));
    //number of unique rows in table
    var Statistic_unique_FT = @Html.Raw(Json.Serialize(Model.AdditionalInfo.Unique[1]));
    var Statistic_unique_ST = @Html.Raw(Json.Serialize(Model.AdditionalInfo.Unique[2]));
    //number of different rows in table
    var Statistic_diff_FT = @Html.Raw(Json.Serialize(Model.AdditionalInfo.Different[1]));
    var Statistic_diff_ST = @Html.Raw(Json.Serialize(Model.AdditionalInfo.Different[2]));

    function generatePdfReport () {
        var pdf = new jsPDF('p', 'pt', 'a4');
        header(pdf);

        doc.text(scriptFT, margins.left + 50, 80);

        pdf.save('prf-repor.pdf');
    }

    function download(name, type) {
        var html = createHtml(firstTableStr, secondTableStr, thirdTableStr, scriptFT, scriptST,
            Statistic_rows_FT, Statistic_rows_ST, Statistic_same_FT, Statistic_same_ST, Statistic_unique_FT, Statistic_unique_ST,
            Statistic_diff_FT, Statistic_diff_ST);
        var a = document.getElementById("a");
        var file = new Blob([html], {
            type: type
        });
        a.href = URL.createObjectURL(file);
        a.download = name;
    }

    margins = {
        top: 70,
        bottom: 40,
        left: 30,
        width: 550
    };

    function imgToBase64(url, callback, imgVariable) {

        if (!window.FileReader) {
            callback(null);
            return;
        }
        var xhr = new XMLHttpRequest();
        xhr.responseType = 'blob';
        xhr.onload = function () {
            var reader = new FileReader();
            reader.onloadend = function () {
                imgVariable = reader.result.replace('text/xml', 'image/jpeg');
                callback(imgVariable);
            };
            reader.readAsDataURL(xhr.response);
        };
        xhr.open('GET', url);
        xhr.send();
    };

    var base64Img = null;
    imgToBase64('/images/octocat.jpg', function (base64) {
        base64Img = base64;
    });

    function header(doc) {
        doc.setFontSize(30);
        doc.setTextColor(40);
        doc.setFontStyle('normal');

        if (base64Img) {
            doc.addImage(base64Img, 'JPEG', margins.left, 10, 40, 40);
        }

        doc.text("Report comparing", margins.left + 50, 40);
        doc.setLineCap(2);
        doc.line(3, 70, margins.width + 43, 70); // horizontal line
    };


</script>

